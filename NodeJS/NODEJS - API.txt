API.

	1. DB CONNECTION
		- Khởi tạo 1 connection (pool = 1). Nếu đã có thì getConnection để sử dụng lại connection
		
	2. CACHE
		
	3. BUILD
		1. Sử dụng TSC + TSCONFIG 
			-> TSC -> COPY các file cần thiết (yml, env, package v...v) -> npm i -> deploy
			
		2. Sử dụng TSC + TSCONFIG + WEBPACK + WEBPACK.CONFIG
			-> ĐÉO CẦN THIẾT
			
		3. Sử dụng typescript-plugin
			-> ĐÉO DC
		
		
	4. CONFIG
		- Với serverless, định nghĩa ra nhiều file yml  tương ứng với các môi trường
		- Với local và các máy ảo khác, sử dụng pm2 để config biến môi trường.
	
	5. CONTENT-TYPE
		app.use(bodyParser.urlencoded({ extended: false }))
		app.use(bodyParser.json({limit: "50mb"}))
		app.use(bodyParser.urlencoded({limit: "50mb", extended: true, parameterLimit:50000}));
	
	6. MIDDLEWARE (HANDLE ERROR)

	
	7. AUTHOR (EVEN WHEN NO REGISTRATION MECHAN)
	
	8. LOGIN 
	
	8. DBCONNECTION
	
		- Each open connection requires about 10MB of RAM and takes a decent amount of time
		- Công thức tính toán số lượng connection mà 1 server có thể mở dựa trên memory của máy chủ: LEAST({DBInstanceClassMemory/9531392},5000)
		td2.micro - 66
		td2.small - 150
		td2.medium - 312
		td2.large - 648
		m3.xlarge - 1237
		- Sử dụng jMeter  để test exhaution của 1 Lambda
		- Vì sao nên để Lambda connection là 1 
		There is a big spike - it means that lambdas need additional containers. Each of them requires 5 new connections, and they were created at the same time. We decided to reduce the number of maximum opened connections to 1. We were wondering how it affects the performance of requests, but the performance was even better than with the previous configuration. The explanation of that is quite straightforward. Lambdas are executed in parallel, however for one container execution is sequential. So even if several users share the same container, they are handled one by one
	
